version: 2.1

executors:
  docker-executor:
    docker:
      - image: circleci/android:api-28
    working_directory: ~/amplify-flutter

  macos-executor:
    macos:
      xcode: 11.6.0
    working_directory: ~/amplify-flutter

commands:
  install_flutter:
    description:
      Install Flutter and set up paths.
    parameters:
      flutter_branch:
        description: Flutter branch or version tag.
        type: string
        default: stable
    steps:
      - run:
          name: Set up Flutter
          command: |
            echo 'export FLUTTER_HOME=${HOME}/sdks/flutter' >> $BASH_ENV
            echo 'export FLUTTER_BRANCH=<< parameters.flutter_branch >>' >> $BASH_ENV
            echo 'export FLUTTER_ROOT=${FLUTTER_HOME}' >> $BASH_ENV
            echo 'export PATH=${PATH}:${FLUTTER_HOME}/bin:${FLUTTER_HOME}/bin/cache/dart-sdk/bin:${HOME}/.pub-cache/bin:${FLUTTER_HOME}/.pub-cache/bin' >> $BASH_ENV
            source $BASH_ENV
            git clone --branch ${FLUTTER_BRANCH} https://github.com/flutter/flutter.git ${FLUTTER_HOME}
            (yes || true) | flutter doctor --android-licenses && flutter doctor
  get_amplify_config:
    description: 
      Retrieves amplifyconfiguration.dart from S3
    steps:
      - run:
          name: Download with CDK
          command: |
            mkdir ~/temp_config
            aws s3 cp s3://test-integration-methodabc/amplifyconfiguration.dart ~/temp_config/
  configure_aws:
    description:
      install aws cli and configure android aws release profile
    steps:
      - run:
          name: install aws cli
          command: |
            sudo pip install awscli
      - run:
          name: configure aws profile
          command: |
            mkdir ~/.aws
            echo -e "[default]\naws_access_key_id=${AWS_ACCESS_KEY_ID_TEST}\naws_secret_access_key=${AWS_SECRET_ACCESS_KEY_TEST}\n" >> ~/.aws/credentials
            echo -e "[default]\nregion=us-west-2\noutput=json\n" > ~/.aws/config
  amplify_symlink:
    description: 
      Create symlink to downloaded config file
    steps:
      - run:
          name: create symlink
          command: |
            ln -s ~/temp_config/amplifyconfiguration.dart ~/amplify-flutter/packages/amplify_auth_cognito/example/lib/amplifyconfiguration.dart
  macos_setup_android:
    description: >-
      Set up the Android environment in macOS.
    steps:
      - run:
          name: Set up env
          command: ./.circleci/android-flutter.sh export-env
      - run:
          name: Install Android SDK from Homebrew
          command: |
            brew tap homebrew/cask >/dev/null
            brew cask install android-sdk >/dev/null
      - run:
          name: Install emulator from SDK manager
          command: ./.circleci/android-flutter.sh sdkmanager
  setup_android_emulator:
    description: >-
      Setup Android emulator.
    steps:
      - run:
          name: Setup emulator
          command: ./.circleci/android-flutter.sh create-emulator
      - run:
          name: Launch emulator
          command: ./.circleci/android-flutter.sh start-emulator
          background: true
      - run:
          name: Launch logcat
          command:
            adb logcat > logcat.log
          background: true
      - run:
          name: Wait emulator
          command: |
            ./.circleci/android-flutter.sh wait-for-avd
            python3 .circleci/unlock_emulator_screen.py
jobs:
  unit_test_flutter:
    executor: docker-executor
    steps:
      - install_flutter
      - checkout
      - run:
          name: Install junitreport for JUnit XML reports
          command: flutter pub global activate junitreport
      - run:
          name: Run Flutter Unit Tests
          command: ./.circleci/test_all_plugins.sh flutter-test
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex "\./packages/.*/test-results/.*-flutter-test\.xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results/junit

  unit_test_ios:
    executor: macos-executor
    steps:
      - install_flutter:
          flutter_branch: 1.17.5
      - checkout
      - run:
          name: Pre-start iOS simulator
          # xcrun instruments returns non zero, but successfully starts the simulator
          command: xcrun instruments -w "iPhone 11 (13.6) [" || true
      - run:
          name: Run iOS Unit Tests
          command: ./.circleci/test_all_plugins.sh ios-test
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex "\./packages/.*/example/ios/test-results/.*-xcodebuild-test\.xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results/junit

  unit_test_android:
    executor: docker-executor
    steps:
      - install_flutter
      - checkout
      - run:
          name: Run Android Unit Tests
          command: ./.circleci/test_all_plugins.sh android-test
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex "\./packages/.*/example/build/.*/test-results/.*\.xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results/junit
  int_test_emulator_android:
    executor: macos-executor
    macos:
      xcode: "11.4.1"
    environment:
      JVM_OPTS: -Xmx3200m
      HOMEBREW_NO_AUTO_UPDATE: '1'
    steps:
      - checkout
      - macos_setup_android
      - install_flutter
      - setup_android_emulator
      - configure_aws
      - get_amplify_config
      - amplify_symlink
      - run:
          name: Run flutter drive
          no_output_timeout: 30m
          command: |
            cd packages/amplify_auth_cognito/example
            flutter drive --target=test_driver/app.dart
      - store_artifacts:
          path: logcat.log
releasable_branches: &releasable_branches
  branches:
    only:
      - release
      - master

workflows:
  test_deploy:
    jobs:
      - int_test_emulator_android
      # - unit_test_flutter
      # - unit_test_android
